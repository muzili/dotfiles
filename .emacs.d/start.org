* Emacs Config
** Setup
*** Startup

#+begin_src emacs-lisp
(when (version< emacs-version "25.1")
  (error "This requires Emacs 25.1 and above!"))

;; Close gc to speed up startup
(defvar default-file-name-handler-alist file-name-handler-alist)
(setq file-name-handler-alist nil)
(setq gc-cons-threshold 80000000)
(add-hook 'emacs-startup-hook
          (lambda ()
            "Restore defalut values after init."
            (setq file-name-handler-alist default-file-name-handler-alist)
            (setq gc-cons-threshold 800000)
            (if (boundp 'after-focus-change-function)
                (add-function :after after-focus-change-function
                              (lambda ()
                                (unless (frame-focus-state)
                                  (garbage-collect))))
              (add-hook 'focus-out-hook 'garbage-collect))))
#+end_src
*** Configure package sources

#+BEGIN_SRC emacs-lisp
(setq package-archives
 '(("gnu"   . "http://mirrors.tuna.tsinghua.edu.cn/elpa/gnu/")
   ("melpa" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/melpa/")
   ("org" . "http://mirrors.tuna.tsinghua.edu.cn/elpa/org/")))

(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile
  (require 'use-package))

;; Should set before loading `use-package'
(eval-and-compile
  (setq use-package-always-ensure t)
  (setq use-package-always-defer t)
  (setq use-package-expand-minimally t)
  (setq use-package-enable-imenu-support t))

;; Required by `use-package'
(use-package diminish)
(use-package bind-key)

#+END_SRC

*** start configuration
#+BEGIN_SRC emacs-lisp
;;
;; Start configuration
;;

(setq-default inhibit-startup-message 't
              initial-scratch-message 'nil
              inhibit-splash-screen 't
              save-place t
              scroll-bar-mode nil
              tool-bar-mode nil
              menu-bar-mode nil
              scroll-margin 0
              indent-tabs-mode nil
              flyspell-issue-message-flag 'nil
              size-indication-mode t
              scroll-conservatively 25
              scroll-preserve-screen-position 1
              cursor-in-non-selected-windows nil
              vc-follow-symlinks nil
              ;; disable possible security problem:
	      enable-local-variables nil
)

(setq delete-old-versions t)
(setq version-control t)
(setq vc-make-backup-files t)
(setq backup-directory-alist `(("." . "~/.emacs.d/backups")))
(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list" t)))

(run-with-idle-timer 0.1 nil 'toggle-frame-maximized)

;;; Ctrl-h = Backspace
(global-set-key [8]  'delete-backward-char)

;fix shortcut key conflicts with chinese input method
(global-unset-key (kbd "C-SPC"))

;; files, folders, buffers and text
;; use fundamental-mode to open large files
(defun lzg/check-large-file ()
  (when (> (buffer-size) 500000)
    (progn (fundamental-mode)
	   (hl-line-mode -1))))
(add-hook 'find-file-hook 'lzg/check-large-file)

#+END_SRC


*** Benchmark the startup time
[[https://github.com/dholm/benchmark-init-el][Benchmark your Emacs initialization]] 提供了 emacs 启动时间测量工具，可以对启动时间进行优化。

#+BEGIN_SRC emacs-lisp
(use-package benchmark-init
  :ensure t
  :config
  ;; To disable collection of benchmark data after init is done.
  (add-hook 'after-init-hook 'benchmark-init/deactivate))
#+END_SRC

*** Set custom settings to load in own file

This stops emacs adding customised settings to init.el.

#+BEGIN_SRC emacs-lisp
(setq package-enable-at-startup nil)
#+END_SRC

*** Add custom packages to load path

#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path (expand-file-name "~/.emacs.d/lisp"))
#+END_SRC

*** Use projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :ensure t
  :diminish projectile-mode " PRJ"
  ;:init (add-hook 'prog-mode-hook #'projectile-mode)
  :init(projectile-global-mode t)
  :config
  (progn
    (setq projectile-keymap-prefix (kbd "C-c p"))
    (setq projectile-completion-system 'default)
    (setq projectile-enable-caching t)
    (setq projectile-indexing-method 'alien)
    (if (executable-find "ag")
      (define-key projectile-command-map (kbd "s") 'projectile-ag))
    (if (executable-find "rg")
      (define-key projectile-command-map (kbd "s") 'projectile-ripgrep))
    (add-to-list 'projectile-globally-ignored-files "node-modules")
    ;; setting for projectile
    (setq projectile-other-file-alist '(("cpp" "h" "hpp" "ipp")
                                        ("ipp" "h" "hpp" "cpp")
                                        ("hpp" "h" "ipp" "cpp")
                                        ("cxx" "hxx" "ixx")
                                        ("ixx" "cxx" "hxx")
                                        ("hxx" "ixx" "cxx")
                                        ("c" "h")
                                        ("m" "h")
                                        ("mm" "h")
                                        ("h" "c" "cpp" "ipp" "hpp" "m" "mm")
                                        ("cc" "hh")
                                        ("hh" "cc")
                                        ("vert" "frag")
                                        ("frag" "vert")
                                        (nil "lock" "gpg")
                                        ("lock" "")
                                        ("gpg" "")
                                        ("js" "css" "html")))
    (defun eqyiel/projectile-current-project-files ()
      "Return a list of files for the current project."
      (let ((files (and projectile-enable-caching
                    (gethash (projectile-project-root) projectile-projects-cache))))
        ;; nothing is cached
        (unless files
          (when projectile-enable-caching
            (message "Empty cache. Projectile is initializing cache..."))
            (setq files
              (split-string
               (shell-command-to-string
               (concat
               "fd '' --hidden "
               (directory-file-name (projectile-project-root))))))
          ;; cache the resulting list of files
          (when projectile-enable-caching
            (projectile-cache-project (projectile-project-root) files)))
      (projectile-sort-files files)))

    (advice-add
      'projectile-current-project-files
      :override
      'eqyiel/projectile-current-project-files)

    (add-to-list 'projectile-other-file-alist '("css" "js")) ;; switch from css -> js
    (add-to-list 'projectile-other-file-alist '("js" "css")) ;; switch from js -> css

    )
  ;(projectile-global-mode)
)

(use-package ripgrep
  :ensure t
  :config
  (setq ripgrep-executable "/usr/bin/rg")
  (setq ripgrep-arguments '("-S")))

(use-package projectile-ripgrep
  :ensure t
  :commands (projectile-ripgrep)
)

(use-package counsel-projectile
  :ensure t
  :config
  (counsel-projectile-mode)
)

(use-package find-file-in-project
  :ensure t
  :bind
  ("C-x f" . find-file-in-project)
  ("C-x d" . find-file-in-current-directory)
  :config
  (progn
    (setq ffip-use-rust-fd t)
  )
)

(use-package fzf
  :ensure t
  :defer t
  ;;:bind ("C-x f" . my-fzf)
  ;; If we're in a git repo, initiate fzf from the root
  :config
  (progn
    (defun my-fzf ()
      (interactive)
      (if (vc-git-registered (or buffer-file-name default-directory))
          (fzf-git)
        (fzf/start "/home/joshua")))))
(with-eval-after-load 'fzf
  (progn
    (defun fzf-home()
      "Start fzf from my homedir."
      (interactive)
      (fzf/start "/home/joshua"))
    )
)


(use-package recentf
  :ensure t
  :bind
  ("C-x C-r" . recentf-open-files)

  :config
  (setq recentf-max-saved-items 800
        ;; https://www.reddit.com/r/emacs/comments/3g468d/stop_recent_files_showing_elpa_packages/
        ;; Cleanup recent files only when Emacs is idle, but not when the mode
        ;; is enabled, because that unnecessarily slows down Emacs. My Emacs
        ;; idles often enough to have the recent files list clean up regularly
        recentf-auto-cleanup 300
        recentf-exclude (list "/\\.git/.*\\'" ; git contents
                              "/elpa/.*\\'"   ; package files
                              ".*\\.gz\\'"
                              "TAGS"
                              "company-statistics-cache.el"
                              "company-cache.el"
                              ".*-autoloads\\.el\\'"
                              ;; https://github.com/hlissner/.emacs.d/blob/master/core/core-editor.el
                              "^/tmp/"
                              "^/ssh:"
                              "/TAGS$"
                              "^/var/folders/.+$"
                              ;; John Wiegley
                              "~\\'"
                              "\\`out\\'"
                              "\\.log\\'"
                              "^/[^/]*:"
                              "\\.el\\.gz\\'"))
  (recentf-mode 1))
#+END_SRC

*** Hydra
#+begin_src emacs-lisp
(use-package hydra
  :ensure t
  :defer t
  :bind("C-c e" . hydra-master/body)
  :config
  (eval-and-compile
    (defhydra hydra-common (:color blue)
      ("<SPC>" nil "quit")))
  (defhydra hydra-master (:color blue :inherit (hydra-common/heads))
    "
----------------------------------------------------------------------------------
  ^[b]^ buffers        ^[c]^ flycheck        ^[j]^ jump        ^[q]^ quit
  ^[w]^ windows        ^[o]^ org             ^[f]^ files       ^[p]^ projectile
  ^[e]^ expand         ^[r]^ replace
----------------------------------------------------------------------------------
    "
    ("b"     hydra-buffers/body nil)
    ("c"     hydra-flycheck/body nil)
    ("j"     hydra-jump/body nil)
    ("q"     kill-emacs nil)
    ("o"     hydra-org/body nil)
    ("f"     hydra-files/body nil)
    ("p"     helm-projectile nil)
    ("e"     hippie-expand nil)
    ("r"     anzu-isearch-query-replace nil))

  (defhydra hydra-buffers (:color blue :hint nil :inherit (hydra-common/heads))
    "
--------------------------------------------------------------------------------
  ^[b]^ switch              ^[d]^ kill the buffer
  ^[i]^ ibuffer             ^[r]^ toggle read-only mode
  ^[w]^ save buffer
---------------------------------------------------------------------------------
    "
    ("d" kill-this-buffer)
    ("i" ibuffer)
    ("r" read-only-mode)
    ("w" save-buffer))

  (defhydra hydra-flycheck (:color blue :hint nil :inherit (hydra-common/heads))
    "
--------------------------------------------------------------------------------
  ^[p]^ previous
  ^[f]^ first
  ^[n]^ next
---------------------------------------------------------------------------------
    "
    ("p" flycheck-previous-error :color red)
    ("f" flycheck-first-error)
    ("n" flycheck-next-error))

  (defhydra hydra-jump (:color red :hint nil :inherit (hydra-common/heads))
    "
--------------------------------------------------------------------------------
  ^[c]^ char          ^[s]^ search                     ^[i]^ imenu
  ^[l]^ line          ^[S]^ search-at-point
---------------------------------------------------------------------------------
    "
    ("c" evil-avy-goto-char :color red)
    ("l" evil-avy-goto-line)
    ("s" helm-swoop)
    ("S" helm-swoop-from-evil-search)
    ("i" helm-imenu))

  (defhydra hydra-org (:color green :hint nil :inherit (hydra-common/heads))
    "
----------------------------------------------------------------------------------
  ^[a]^ agenda    ^[c]^ capture
----------------------------------------------------------------------------------
  "
    ("a" org-agenda)
    ("c" org-capture))

  (defhydra hydra-files (:hint nil :inherit (hydra-common/heads))
    "
-------------------------------------------------------------------------------
  ^[f]^ find        ^[i]^ init
-------------------------------------------------------------------------------
"
    ("f" helm-find-files)
    ("i" (find-file "~/.emacs.d/init.org"))))
#+end_src

** Coding
*** global config
#+BEGIN_SRC emacs-lisp

;You can also tell Emacs to revert buffers periodically. To do this for a specific buffer, enable the minor mode Auto-Revert mode by typing M-x auto-revert-mode. This automatically reverts the current buffer when its visited file changes on disk. To do the same for all file buffers, type M-x global-auto-revert-mode to enable Global Auto-Revert mode. These minor modes do not check or revert remote files, because that is usually too slow. This behavior can be changed by setting the variable auto-revert-remote-files to non-nil.
;我们使能 global-auto-revert-mode, 就是想以 disk 上的修改为准

(global-auto-revert-mode)

(setq
  backup-by-copying t
  backup-directory-alist  '(("." . "~/.saves"))
  delete-old-versions t
  kept-new-versions 6
  kept-old-versions 2
  version-control t)

(set-language-environment "UTF-8")


(define-key global-map (kbd "S-<left>") 'windmove-left)
(define-key global-map (kbd "S-<right>") 'windmove-right)
(define-key global-map (kbd "S-<up>") 'windmove-up)
(define-key global-map (kbd "S-<down>") 'windmove-down)

;; select current line
(defun highlight-current-line ()
   (interactive)
   (set-mark (line-beginning-position))
   (end-of-line))

(define-key global-map (kbd "C-M-l") 'highlight-current-line)
(define-key global-map (kbd "C-c ,") 'rename-buffer)


;; open truncate lines
;; https://www.zhihu.com/question/50377885 自动换行
(global-visual-line-mode 1) ; 1 for on, 0 for off.

(use-package exec-path-from-shell
  :ensure)

(exec-path-from-shell-copy-env "PATH")

#+END_SRC

*** Which-key
非常有用的组件，当只是输入一部分是按键时，在下面窗口显示候选项.
#+BEGIN_SRC emacs-lisp
;; bring up help for key bindings
(use-package which-key
  :ensure t
  :config
  (which-key-mode))
#+END_SRC
*** rtags
#+begin_src emacs-lisp
;(use-package rtags
;  :config
;  (progn
;  (add-hook 'c-mode-common-hook
;			  (lambda ()
;				(rtags-enable-standard-keybindings)
;				(local-set-key (kbd "M-.") 'rtags-find-symbol-at-point)
;;				(local-set-key (kbd "M-s") 'rtags-find-symbol)
;				(local-set-key (kbd "M-,") 'rtags-location-stack-back)
;				(local-set-key (kbd "C-M-*") 'rtags-location-stack-forward)
;				(local-set-key (kbd "M-N") 'rtags-next-match)
;				(local-set-key (kbd "M-P") 'rtags-previous-match)
;				(local-set-key (kbd "C-S-SPC") 'rtags-print-cursorinfo)
;				))
;	))
;
#+end_src
*** ggtags for source code navigation

https://github.com/leoliu/ggtags

#+BEGIN_SRC emacs-lisp
; tags for code navigation
;(use-package ggtags
;  :ensure t
;  :config
;  (progn
;  (defun enable-ggtags-condition ()
;    (when
;      (locate-dominating-file default-directory "GTAGS")
;      (add-hook 'prog-mode-hook #'ggtags-mode)))
;  (enable-ggtags-condition)
;  (define-key ggtags-mode-map (kbd "C-c g s") 'ggtags-find-other-symbol)
;  (define-key ggtags-mode-map (kbd "C-c g h") 'ggtags-view-tag-history)
;  (define-key ggtags-mode-map (kbd "C-c g r") 'ggtags-find-reference)
;  (define-key ggtags-mode-map (kbd "C-c g t") 'ggtags-find-tag-dwim)
;  (define-key ggtags-mode-map (kbd "C-c g f") 'ggtags-find-file)
;  (define-key ggtags-mode-map (kbd "C-c g c") 'ggtags-create-tags)
;  (define-key ggtags-mode-map (kbd "C-c g u") 'ggtags-update-tags)
;  ;(define-key ggtags-mode-map (kbd "M-]") 'ggtags-find-reference)
;  ;(define-key ggtags-mode-map (kbd "C-M-.") 'ggtags-find-tag-regexp)
;  )
;)
#+END_SRC

*** Dump jump

https://github.com/jacktasia/dumb-jump

#+BEGIN_SRC emacs-lisp
(use-package dumb-jump
  :bind (("M-g o" . dumb-jump-go-other-window)
         ("M-g j" . dumb-jump-go)
         ("M-g b" . dumb-jump-back)
         ("M-g i" . dumb-jump-go-prompt)
         ("M-g x" . dumb-jump-go-prefer-external)
         ("M-g z" . dumb-jump-go-prefer-external-other-window))
  :ensure)

#+END_SRC
*** Auto complete with company

[[https://phenix3443.github.io/notebook/emacs/company-practice.html][company-mode 实践]]


#+BEGIN_SRC emacs-lisp

(use-package company
  :ensure t
  :defer t
  :diminish company-mode " AC"
  :init
  (progn
    (require 'company)
    (setq company-minimum-prefix-length 2
          company-require-match nil
          company-dabbrev-ignore-case nil
          company-dabbrev-downcase nil
          company-backends
          '((company-capf
             company-files
             company-keywords
             company-yasnippet
             )
             (company-abbrev company-dabbrev)))
     (define-key company-mode-map (kbd "M-/") 'company-complete)
     (define-key company-active-map (kbd "M-n") nil)
     (define-key company-active-map (kbd "M-p") nil)
     (global-company-mode t))
)

#+END_SRC

*** LSP

#+BEGIN_SRC emacs-lisp
;(use-package eglot
;  :hook (prog-mode . eglot-ensure)
;  :config
;  (add-to-list 'eglot-server-programs '(python-mode . ("pyls")))
;  (add-to-list 'eglot-server-programs '(rust-mode . ("rls")))
;;  (add-to-list 'eglot-server-programs '((c++-mode c-mode) "clangd"))
;  (add-to-list 'eglot-server-programs '((c++-mode c-mode) "ccls"))
;  (add-to-list 'eglot-server-programs '(js2-mode . ("javascript-typescript-stdio")))
;  (add-to-list 'eglot-server-programs '(typescript-mode . ("javascript-typescript-stdio")))
;  (add-to-list 'eglot-server-programs '(javascript-mode . ("javascript-typescript-stdio")))
;  (add-hook 'eglot--managed-mode-hook (lambda () (flymake-mode -1)))
;)

;https://emacs-china.org/t/lsp-mode-lsp-el/7742 使用lsp-mode 的新接口
(use-package lsp-mode
:commands lsp
:custom
  (lsp-project-blacklist '("^/usr/"))
  (lsp-prefer-flymake nil)
  (lsp-highlight-symbol-at-point nil)
  (lsp-auto-guess-root t)
:config
  (require 'lsp-clients)
)

(use-package lsp-ui
:commands lsp-ui-mode
:hook
(lsp-mode . lsp-ui-mode)
:bind (:map lsp-ui-mode-map
    ([remap xref-find-definitions] . lsp-ui-peek-find-definitions)
    ([remap xref-find-references] . lsp-ui-peek-find-references))
:config
  (setq lsp-ui-sideline-enable t
        lsp-ui-sideline-show-symbol t
        lsp-ui-sideline-show-hover t
        lsp-ui-sideline-show-code-actions t
        lsp-ui-sideline-update-mode 'point)
)

(use-package company-lsp
:commands company-lsp
:custom
  (company-quickhelp-delay 1)
  (company-lsp-enable-snippet t)
  (company-lsp-async t)
  (company-lsp-cache-candidates t)
  (company-lsp-enable-recompletion t)
:config
  (push 'company-lsp company-backends)
)


(use-package dap-mode
  :ensure t
  :after lsp-mode
  :config
  (dap-mode t)
  (dap-ui-mode t))

#+END_SRC

*** Yasnippet

#+BEGIN_SRC emacs-lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Package: yasnippet
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(use-package yasnippet
  :ensure t
  :commands (yas-reload-all)
  :init
  (eval-when-compile
    ;; Silence missing function warnings
    (declare-function yas-global-mode "yasnippet.el"))
  :defer 5
  :config
  (yas-global-mode t)
  (yas-reload-all))
(use-package yasnippet-snippets
  :ensure t
  :after yasnippet
  :config
  (yas-reload-all))

#+END_SRC
*** docker
#+BEGIN_SRC emacs-lisp
(use-package dockerfile-mode
  :defer t
  :ensure t
)
#+END_SRC

*** web-mode
#+BEGIN_SRC emacs-lisp

(use-package emmet-mode
  :defer t
  :ensure t
)

(use-package nodejs-repl
  :defer t
  :ensure)

(use-package web-mode
  :defer t
  :ensure t
  :mode (("\\.jsx\\'" . web-mode)
         ("\\.vue\\'" . web-mode)
         ("\\.js\\'" . web-mode)
         ("\\.ts\\'" . web-mode)
         ("\\.css\\'" . web-mode)
         ("\\.json\\'" . web-mode)
         ("\\.html\\'" . web-mode))
  :config
    (add-hook 'web-mode-hook 'emmet-mode)
    (add-hook 'web-mode-hook 'company-mode)
    (add-hook 'web-mode-hook
      (lambda ()
        (progn
          (setq web-mode-script-padding 0)
          (setq web-mode-enable-current-element-highlight nil)
          (set-face-foreground 'web-mode-html-tag-bracket-face "white")
          (when (string= web-mode-content-type "jsx")
            (progn
              (setq-local emmet-expand-jsx-className? t))))))
       (define-key web-mode-map (kbd "C-j") 'emmet-expand-line)
       (define-key web-mode-map (kbd "C-c z z") 'nodejs-repl)
       (define-key web-mode-map (kbd "C-c z r") 'nodejs-repl-send-region)
       (define-key web-mode-map (kbd "C-c z l") 'nodejs-repl-send-last-sexp)
       (add-to-list 'web-mode-content-types '("html" . "\\.vue\\'"))
       (add-to-list 'web-mode-content-types '("json" . "\\.json\\'"))
       (add-to-list 'web-mode-content-types '("jsx" . ".\\.js[x]?\\'")))

#+END_SRC

*** whitespace-cleanup
#+BEGIN_SRC emacs-lisp
(use-package whitespace-cleanup-mode
  :ensure t
  :config
  ;(add-hook 'before-save-hook 'whitespace-cleanup))
)
#+END_SRC

*** markdown
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :defer t
  :ensure t
  :commands (markdown-mode gfm-mode)
  :config (define-key markdown-mode-map (kbd "C-c C-c") 'markdown-preview-mode)
  :init (setq markdown-command "multimarkdown")

  (use-package markdown-preview-mode
  :ensure t
    :defer t)
)
#+END_SRC

*** typescript

#+BEGIN_SRC emacs-lisp
;https://github.com/ananthakumaran/tide
;(use-package tide
;  :ensure t
;  :defer t
;  :config
;
;    (defun my-ts-mode-configuration ()
;      (interactive)
;      (tide-setup)
;      (eldoc-mode +1)
;      (tide-hl-identifier-mode +1)
;      (company-mode +1))
;      ; (define-key typescript-mode-map (kbd "M-/") 'tide-jump-to-implementation)
;      ;(define-key typescript-mode-map (kbd "M-?") 'tide-references))
;
;    (add-hook 'typescript-mode 'my-ts-mode-configuration)
;    ;; aligns annotation to the right hand side
;    (setq company-tooltip-align-annotations t)
;    ;; formats the buffer before saving
;    (add-hook 'before-save-hook 'tide-format-before-save)
;    (add-to-list 'auto-mode-alist '("\\.js\\'" . typescript-mode))
;    (add-to-list 'auto-mode-alist '("\\.ts\\'" . typescript-mode))
;
;    (setq tide-format-options '(:insertSpaceAfterFunctionKeywordForAnonymousFunctions t :placeOpenBraceOnNewLineForFunctions nil))
;)

#+END_SRC

*** Spell check for text editor mode
#+BEGIN_SRC emacs-lisp
(set-default 'ispell-skip-html t)
(setq ispell-local-dictionary "english")
(setq-default ispell-program-name "hunspell")

(defun turn-on-flyspell ()
  "Force flyspell-mode on using a positive arg.  For use in hooks."
  (interactive)
  (flyspell-mode 1))

(autoload 'flyspell-mode "flyspell" "On-the-fly spelling checker." t)
(add-hook 'text-mode-hook 'turn-on-flyspell)
(add-hook 'TeX-mode-hook 'turn-on-flyspell)

#+END_SRC

*** init-editing-utils.el
#+BEGIN_SRC emacs-lisp

;; whitespace mode
(autoload 'whitespace-mode "whitespace" "Toggle whitespace visualization."        t)
(autoload 'whitespace-toggle-options "whitespace" "Toggle local `whitespace-mode' options." t)

;https://www.reddit.com/r/emacs/comments/3rxfr5/xclip_copypaste_killyank_and_emacs_in_a_terminal/
(use-package xclip
  :ensure t
  :config
  (xclip-mode 1)
  (setq x-select-enable-clipboard t
        x-select-enable-primary t)
)

;https://stackoverflow.com/questions/1229142/how-can-i-save-my-mini-buffer-history-in-emacs
(savehist-mode 1)
;; http://www.oreillynet.com/lpt/wlg/6162
;(setq x-select-enable-clipboard t)
;(setq interprogram-paste-function 'x-cut-buffer-or-selection-value)

;(global-set-key "\C-w" 'clipboard-kill-region)
;(global-set-key "\M-w" 'clipboard-kill-ring-save)
;(global-set-key "\C-y" 'clipboard-yank)


(setq select-active-regions t) ;  active region sets primary X11 selection
(global-set-key [mouse-2] 'mouse-yank-primary)  ; make mouse middle-click only paste from primary X11 selection, not clipboard and kill ring.

;;http://superuser.com/questions/330849/can-i-tell-emacs-to-paste-middle-mouse-button-on-the-cursor-position
(setq mouse-yank-at-point t)

(defun yank-to-x-clipboard ()
  (interactive)
  (if (region-active-p)
        (progn
          (shell-command-on-region (region-beginning) (region-end) "xsel -i -b")
          (message "Yanked region to clipboard!")
          (deactivate-mark))
    (message "No region active; can't yank to clipboard!")))

#+END_SRC
*** Magit is an awesome interface to git. Summon it with `C-x g`.
#+BEGIN_SRC emacs-lisp
(use-package magit
  :defer t
  :ensure t
  :bind ("C-x g" . magit-status))
(use-package git-gutter
  :ensure t
  :config
  (global-git-gutter-mode 't)
  :diminish git-gutter-mode)
(use-package git-timemachine
  :ensure t)
#+END_SRC

*** C/C++ mode
- **Install ccls**

#+begin_src shell
git clone --depth=1 --recursive https://github.com/MaskRay/ccls
cd ccls
cmake -H. -BRelease -DCMAKE_BUILD_TYPE=Release -DCMAKE_EXPORT_COMPILE_COMMANDS=YES
cmake  --build Release
#+end_src

- **Install ccls shell wrapper(/usr/local/bin/ccls)**

#+begin_src shell
CCLS_DIR=/data/code/misc/ccls
exec $CCLS_DIR/Release/ccls --log-file=/tmp/ccls.log -v=1  "$@"
#+end_src

#+BEGIN_SRC emacs-lisp
(use-package ccls
  :init
  (defun ccls/callee () (interactive)
	 (lsp-ui-peek-find-custom "$ccls/call" '(:callee t)))
  (defun ccls/caller () (interactive)
	 (lsp-ui-peek-find-custom "$ccls/call"))
  (defun ccls/vars (kind)
    (lsp-ui-peek-find-custom "$ccls/vars" `(:kind ,kind)))
  (defun ccls/base (levels)
    (lsp-ui-peek-find-custom "$ccls/inheritance" `(:levels ,levels)))
  (defun ccls/derived (levels)
    (lsp-ui-peek-find-custom "$ccls/inheritance" `(:levels ,levels :derived t)))
  (defun ccls/member (kind) (interactive)
	 (lsp-ui-peek-find-custom "$ccls/member" `(:kind ,kind)))

  ;; References w/ Role::Role
  (defun ccls/references-read () (interactive)
	 (lsp-ui-peek-find-custom
	  "textDocument/references"
	  (plist-put
	   (lsp--text-document-position-params) :role 8)))

  ;; References w/ Role::Write
  (defun ccls/references-write ()
    (interactive)
    (lsp-ui-peek-find-custom
     "textDocument/references"
     (plist-put
      (lsp--text-document-position-params) :role 16)))

  ;; References w/ Role::Dynamic bit (macro expansions)
  (defun ccls/references-macro () (interactive)
	 (lsp-ui-peek-find-custom
	  "textDocument/references"
	  (plist-put
	   (lsp--text-document-position-params) :role 64)))

  ;; References w/o Role::Call bit (e.g. where functions are taken addresses)
  (defun ccls/references-not-call () (interactive)
	 (lsp-ui-peek-find-custom
	  "textDocument/references"
	  (plist-put
	   (lsp--text-document-position-params) :excludeRole 32)))
  ;; ccls/vars ccls/base ccls/derived ccls/members have a parameter while others are interactive.
  ;; (ccls/base 1) direct bases
  ;; (ccls/derived 1) direct derived
  ;; (ccls/member 2) => 2 (Type) => nested classes / types in a namespace
  ;; (ccls/member 3) => 3 (Func) => member functions / functions in a namespace
  ;; (ccls/member 0) => member variables / variables in a namespace
  ;; (ccls/vars 1) => field
  ;; (ccls/vars 2) => local variable
  ;; (ccls/vars 3) => field or local variable. 3 = 1 | 2
  ;; (ccls/vars 4) => parameter
  ;:custom
  ;(ccls-executable "/home/joshua/code/misc/ccls/Release/ccls")
  ;(ccls-args '("--log-file=/home/joshua/tmp/ccls.log" "-v=2" "--init={\"maxPathSize\":512}"))
  :hook ((c-mode c++-mode) . (lambda () (require 'ccls) (lsp)))
)

(use-package ivy-xref
  :ensure t
  :after ivy
  :custom (xref-show-xrefs-function #'ivy-xref-show-xrefs))


(use-package clang-format
  :init
  (setq clang-format-style "Google")
  :bind
  (("C-c C-f" . clang-format-region)))

(use-package modern-cpp-font-lock
  :ensure t
  :delight modern-c++-font-lock-mode
  :hook (c++-mode . modern-c++-font-lock-mode))

;; google-c-style
(use-package google-c-style
  :ensure t
  :hook ((c-mode-common . google-set-c-style)
         (c-mode-common . google-make-newline-indent)))

;; cmake-mode
(use-package cmake-mode
  :ensure t
  :defer t
  :hook (cmake-mode . (lambda()
                        (progn
                          (setq-local company-idle-delay nil)
                          (setq-local company-dabbrev-code-everywhere t)
                          (setq-local company-backends '(company-cmake
                                                         company-capf
                                                         company-files))))))

;; cmake-font-lock
(use-package cmake-font-lock
  :ensure t
  :commands (cmake-font-lock-activate)
  :hook (cmake-mode . (lambda() (progn
                              (cmake-font-lock-activate)
                              (font-lock-refresh-defaults)))))

;;http://emacs-fu.blogspot.com/2008/12/quickly-switching-between-header-and.html
;;quickly switch between header and source
(add-hook 'c-mode-common-hook
  (lambda()
    (local-set-key  (kbd "C-c o") 'ff-find-other-file)))

;;; http://www.emacswiki.org/emacs/CEldocMode
;;(add-hook 'c-mode-hook 'c-turn-on-eldoc-mode)

#+END_SRC

*** Tex/LaTeX mode
#+BEGIN_SRC emacs-lisp
(use-package auctex
  :ensure t
  :mode ("\\.tex\\'" . latex-mode)
  :defer t
  :custom
   (TeX-auto-save t)
   (TeX-electric-escape nil)
   (TeX-electric-math '("\\(" . "\\)") "Smart $ behavior")
   (TeX-electric-sub-and-superscript t)
   (TeX-parse-self t)
   (reftex-plug-into-AUCTeX t)
   (TeX-source-correlate-method 'synctex)
   (TeX-source-correlate-mode t)
   (TeX-clean-confirm nil)
   ;; TeX-command-list by default contains a bunch of stuff I'll never
   ;; use. I use latexmk, xelatexmk, and View.  That's pretty much it.
   ;; Maybe one day I'll add "clean" back to the list.
   (TeX-command-list
    '(("LaTeXMK" "latexmk -synctex=1 -quiet -xelatex %s"
       TeX-run-compile nil t :help "Process file with xelatexmk")
      ("View" "%V" TeX-run-discard-or-function nil t :help "Run Viewer")))
  :hook
   (LaTeX-mode . LaTeX-math-mode)
   (LaTeX-mode . reftex-mode)
   (LaTeX-mode . TeX-PDF-mode)
   (LaTeX-mode . LaTeX-preview-setup)
   (LaTeX-mode . flyspell-mode)
  :config
  (setq-default TeX-master nil)
  (setq-default TeX-engine 'xetex)
  (setq-default TeX-command-default "LaTeXMK")
  (setq-default TeX-PDF-mode t)
  (use-package auctex-latexmk
    :ensure t
    :config
    (auctex-latexmk-setup))

  (use-package company-auctex
    :ensure t
    :requires company
    :config
    (company-auctex-init))
  )

(use-package company-math
  :ensure t
  :requires company
  :config
  (add-hook 'LaTeX-mode-hook (lambda ()
                               (set (make-local-variable 'company-backends)
                                     '(company-math-symbols-latex
                                       company-latex-commands
                                       company-math-symbols-unicode
                                       company-files
                                       company-capf
                                       company-semantic
                                       company-dabbrev
                                       ))
                               (TeX-fold-mode 1)
                               (add-hook 'find-file-hook
                                         'TeX-fold-buffer t t)))
  (add-hook 'LaTeX-mode-hook #'outline-minor-mode)
)

(use-package company-reftex
  :ensure t
  :config (add-to-list 'company-backends #'company-reftex-labels))

(use-package cdlatex
  :ensure t
  :config
  (add-hook 'org-mode-hook 'turn-on-org-cdlatex)
  (add-hook 'LaTeX-mode-hook 'turn-on-cdlatex))

#+END_SRC

*** Email for emacs
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "/usr/local/share/emacs/site-lisp/mu4e")
(autoload 'mu4e "mu4e")
(eval-after-load 'mu4e
'(progn
  ;; Use mu4e as default mail agent
  (setq mail-user-agent 'mu4e-user-agent)
  ;; Mail folder set to ~/Maildir
(setq mu4e-maildir "~/Mail")         ; NOTE: should not be symbolic link
;; Fetch mail by offlineimap
;(setq mu4e-get-mail-command "offlineimap")
;; Fetch mail in 60 sec interval
(setq mu4e-update-interval nil)

;hide the \"Indexing...\" messages
(setq mu4e-hide-index-messages t)

; process it out of mu to speed up mu4e
(setq mu4e-index-lazy-check t)

; do not show related thread mails
(setq mu4e-headers-include-related nil)
(setq mu4e-headers-show-threads nil)

;; don't keep message buffers around
(setq message-kill-buffer-on-exit t)

;set default attachments save dir
(setq mu4e-attachment-dir "/data/mail/attachments")

;; folder for sent messages
(setq mu4e-sent-folder   "/whaley/Sent Messages")
;; unfinished messages
(setq mu4e-drafts-folder "/whaley/Drafts")
;; trashed messages
(setq mu4e-trash-folder  "/whaley/Junk")
;; saved messages
(setq mu4e-trash-folder  "/whaley/Archives")

(require 'mu4e-contrib)
(setq mu4e-html2text-command 'mu4e-shr2text)
;; try to emulate some of the eww key-bindings
;(add-hook 'mu4e-view-mode-hook
;          (lambda ()
;            (local-set-key (kbd "<tab>") 'shr-next-link)
;            (local-set-key (kbd "<backtab>") 'shr-previous-link)))

;Now, when viewing such a difficult message, type aV, and
;the message opens inside a webbrowser.
(add-to-list 'mu4e-view-actions
             '("ViewInBrowser" . mu4e-action-view-in-browser) t)

;; whether to show images
(setq mu4e-view-show-images nil)

;whether to confirm quit
(setq mu4e-confirm-quit nil)

;cc to self by default
(setq mu4e-compose-keep-self-cc t)

;; sending mail
(setq message-send-mail-function 'message-send-mail-with-sendmail
      sendmail-program "/usr/sbin/sendmail"
      user-full-name "Li Zhiguang"
      message-sendmail-f-is-evil 't)

(require 'org-mu4e)

(define-key mu4e-headers-mode-map (kbd "C-c c") 'org-mu4e-store-and-capture)
(define-key mu4e-view-mode-map    (kbd "C-c c") 'org-mu4e-store-and-capture)
(define-key mu4e-headers-mode-map (kbd "<tab>") 'mu4e-headers-next-unread)
(define-key mu4e-view-mode-map (kbd "<tab>") 'mu4e-view-headers-next-unread)

(setq mu4e-headers-date-format "%d-%m-%Y %H:%M")
(setq mu4e-headers-fields
    '( (:date          .  18)    ;; alternatively, use :human-date
       (:flags         .   4)
       (:from-or-to    .  16)
       (:subject       .  nil))) ;; alternatively, use :thread-subject

(setq mu4e-maildir-shortcuts
      '( ("/whaley/INBOX"               . ?i)
         ("/whaley/Sent Messages"   . ?s)
         ("/whaley/bugzilla"   . ?b)
         ("/whaley/Junk"       . ?t)))

(setq mu4e-headers-actions
  '( ("capture message"  . mu4e-action-capture-message)
     ("show this thread" . mu4e-action-show-thread)))


;; 1) messages to me@foo.example.com should be replied with From:me@foo.example.com
;; 2) messages to me@bar.example.com should be replied with From:me@bar.example.com
;; 3) all other mail should use From:me@cuux.example.com
(add-hook 'mu4e-compose-pre-hook
  (defun my-set-from-address ()
    "Set the From address based on the To address of the original."
    (let ((msg mu4e-compose-parent-message)) ;; msg is shorter...
      (when msg
        (setq user-mail-address
          (cond
            ((mu4e-message-contact-field-matches msg :to "li.zhiguang@whaley.cn")
              "li.zhiguang@whaley.cn")
            ((mu4e-message-contact-field-matches msg :to "muzili@gmail.com")
              "muzili@gmail.com")
            (t "li.zhiguang@whaley.cn")))))))

(add-hook 'mu4e-compose-mode-hook
  (defun my-add-bcc ()
    "Add a Bcc: header."
    (save-excursion (message-add-header "Bcc: li.zhiguang@whaley.cn\n"))))

;; always show mail adress
(setq mu4e-view-show-addresses t)

;Maximum number of results to show; this affects performance
;quite a bit
(setq mu4e-headers-results-limit 2000)
; do not ask when save attachments
(setq mu4e-save-multiple-attachments-without-asking t)
(setq mu4e-bookmarks
      '(
        ("maildir:/whaley/INBOX"                             "[Whaley] All"            ?a)
        ("flag:unread from:bugzilla"                         "[Whaley] Unread bugs"    ?b)
        ("flag:unread from:gerrit"                           "[Whaley] Unread CLs"     ?g)
        ("flag:unread from:jenkins@whaley.cn subject:Failed" "[Whaley] Unread failed built"     ?j)
        ("flag:unread AND maildir:/whaley/INBOX"             "[Whaley] Unread Inbox"   ?u)
        ("date:24h..now AND maildir:/whaley/INBOX"         "Today's messages"        ?t)
        ("date:7d..now AND maildir:/whaley/INBOX"            "Last 7 days"             ?w)
        ("date:30d..now AND maildir:/whaley/INBOX"           "Last 30 days"            ?m)
        ("mime:image/* AND maildir:/whaley/INBOX"            "Messages with images"    ?p)
        ("flag:attach AND maildir:/whaley/INBOX"             "Message with attachment" ?A)
        ("date:1m..now AND mime:text/calendar"               "Calendar in 1 month"     ?c)
        ))

; message mode hooks
(add-hook 'message-mode-hook 'orgstruct++-mode 'append)
(add-hook 'message-mode-hook 'turn-on-auto-fill 'append)
;(add-hook 'message-mode-hook 'bbdb-define-all-aliases 'append)
(add-hook 'message-mode-hook 'orgtbl-mode 'append)
(add-hook 'message-mode-hook 'turn-on-flyspell 'append)
(add-hook 'message-mode-hook
          '(lambda () (setq fill-column 72))
          'append)
))

#+END_SRC

*** ivy

ivy 能够补全emacs的很多东西，如命令等。 需要 ivy swiper counsel 插件共同工作, 见[[https://github.com/abo-abo/swiper][Ivy - a generic completion frontend for Emacs]].

#+BEGIN_SRC emacs-lisp

(use-package ivy
  :ensure t
  :diminish ivy-mode
  :bind (:map ivy-minibuffer-map
              ("M-x" . ivy-dispatching-done))
  :config
  (progn
    (with-eval-after-load 'projectile
      (setq projectile-completion-system 'ivy))
    (with-eval-after-load 'magit
      (setq magit-completing-read-function 'ivy-completing-read))
    (with-eval-after-load 'dumb-jump
       (setq dumb-jump-selector 'ivy))
    (with-eval-after-load 'mu4e
      (setq mu4e-completing-read-function 'ivy-completing-read))
    (with-eval-after-load 'rtags
      (setq rtags-display-result-backend 'ivy))

    (setq ivy-use-virtual-buffers nil)
    (setq ivy-flx-limit 100)
    (setq ivy-re-builders-alist
        '((counsel-git-log . ivy--regex-plus)
          (swiper . ivy--regex-plus)
          (swiper-multi . ivy--regex-plus)
          (projectile-completing-read . ivy--regex-fuzzy)
          (counsel-fzf . regexp-quote)
          (t . ivy--regex-fuzzy)))
    (setq ivy-initial-inputs-alist nil)
    ;(setq-default ivy-use-virtual-buffers t)

    ;; swapping behavior
    (define-key ivy-minibuffer-map (kbd "RET") 'ivy-alt-done)
    (define-key ivy-minibuffer-map (kbd "C-j") 'ivy-done)

    (define-key ivy-minibuffer-map (kbd "<C-return>") 'ivy-immediate-done)

    (setq enable-recursive-minibuffers t)
    (ivy-mode t)
    ))

(use-package swiper
  :ensure t
  :after ivy
  :bind ("C-s" . swiper)
  :config
  (progn
    ;;https://www.emacswiki.org/emacs/SearchAtPoint
    (define-key swiper-map (kbd "M-.")
      (lambda () (interactive) (insert (format "\\<%s\\>" (with-ivy-window (thing-at-point 'symbol))))))
  ))

(use-package counsel
  :ensure t
  :bind (("M-x" . counsel-M-x)
         ("C-o" . counsel-find-file))
  :init
  (setq projectile-switch-project-action 'counsel-fzf)
  :commands (counsel-ag
             counsel-find-file
             counsel-fzf
             counsel-git
             counsel-rg
             counsel-yank-pop)
  :config
  (use-package smex
    :ensure t)
  ;(use-package flx
  ;  :ensure t)
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq counsel-yank-pop-height 15)
  (setq counsel-evil-registers-height 15)

  ;; intentional space before end of string
  (setq ivy-count-format "(%d/%d) ")

  (setq ivy-use-selectable-prompt t)
  (setq counsel-async-filter-update-time 10000)
  (setq ivy-dynamic-exhibit-delay-ms 20)

  (setq counsel-git-cmd
        "git ls-files --exclude-standard --full-name --others --cached --")
  (setq counsel-rg-base-command
        "rg --max-columns 80 -i --no-heading --line-number --color never %s .")
  (setq counsel-ag-base-command "ag -U --nocolor --nogroup %s -- .")
  (ivy-set-prompt 'counsel-fzf (lambda () "> "))
)

#+END_SRC

*** Hydra
#+begin_src emacs-lisp
;; hydra
(use-package hydra
  :defer t)

(defhydra hydra-smartparens (global-map "M-p s" :hint t)
  "
Sexps (quit with _q_, help with _h_)
^Nav^            ^Barf/Slurp^                 ^Depth^
^---^------------^----------^-----------------^-----^-----------------
_f_: forward     _→_:          slurp forward   _R_: splice
_b_: backward    _←_:          barf forward    _r_: raise
_u_: backward ↑  _C-<right>_:  slurp backward  _↑_: raise backward
_d_: forward ↓   _C-<left>_:   barf backward   _↓_: raise forward
_p_: backward ↓
_n_: forward ↑
^Kill^           ^Misc^                       ^Wrap^
^----^-----------^----^-----------------------^----^------------------
_w_: copy        _j_: join                    _(_: wrap with ( )
_k_: kill        _s_: split                   _{_: wrap with { }
^^               _t_: transpose               _'_: wrap with ' '
^^               _c_: convolute               _\"_: wrap with \" \"
^^               _i_: indent defun"
  ("q" nil)
  ("h" hydra-smartparens/body)
  ;; Wrapping
  ("(" (lambda (_) (interactive "P") (sp-wrap-with-pair "(")))
  ("{" (lambda (_) (interactive "P") (sp-wrap-with-pair "{")))
  ("'" (lambda (_) (interactive "P") (sp-wrap-with-pair "'")))
  ("\"" (lambda (_) (interactive "P") (sp-wrap-with-pair "\"")))
  ;; Navigation
  ("f" sp-forward-sexp )
  ("b" sp-backward-sexp)
  ("u" sp-backward-up-sexp)
  ("d" sp-down-sexp)
  ("p" sp-backward-down-sexp)
  ("n" sp-up-sexp)
  ;; Kill/copy
  ("w" sp-copy-sexp)
  ("k" sp-kill-sexp)
  ;; Misc
  ("t" sp-transpose-sexp)
  ("j" sp-join-sexp)
  ("s" sp-split-sexp)
  ("c" sp-convolute-sexp)
  ("i" sp-indent-defun)
  ;; Depth changing
  ("R" sp-splice-sexp)
  ("r" sp-splice-sexp-killing-around)
  ("<up>" sp-splice-sexp-killing-backward)
  ("<down>" sp-splice-sexp-killing-forward)
  ;; Barfing/slurping
  ("<right>" sp-forward-slurp-sexp)
  ("<left>" sp-forward-barf-sexp)
  ("C-<left>" sp-backward-barf-sexp)
  ("C-<right>" sp-backward-slurp-sexp))

#+end_src
*** hungry-delete

一次删除连续的空格, 不用按多次删除键

#+BEGIN_SRC emacs-lisp
(use-package hungry-delete
  :ensure t
  :diminish hungry-delete-mode
  :config
  (global-hungry-delete-mode t)
)
#+END_SRC
*** Smart shift
https://github.com/hbin/smart-shift
#+begin_src emacs-lisp
(use-package smart-shift
  :ensure t
  :defer t
  :config
  (progn
    (global-smart-shift-mode 1)
    ))
#+end_src
*** Smart parents

输入括号，引号成对出现, 具体见 [[https://github.com/lujun9972/emacs-document/blob/master/emacs-common/Smartparens%25E7%2594%25A8%25E6%25B3%2595%25E8%25AF%25A6%25E8%25A7%25A3.org][Smartparens用法详解]]

#+BEGIN_SRC emacs-lisp
(use-package smartparens
  :defer t
  :config
  (progn
    (show-paren-mode t)
    (smartparens-global-mode t)
    ;; emacs-lisp-mode 中单引号不要成对显示
    (sp-local-pair 'emacs-lisp-mode "'" nil :actions nil)
    (setq show-paren-delay 0.1)
    ;; 高亮光标层次的括号
    (define-advice show-paren-function (:around (fn) fix-show-paren-function)
      "Highlight enclosing parens"
      (cond ((looking-at-p "\\s(") (funcall fn))
        (t (save-excursion
         (ignore-errors (backward-up-list))
         (funcall fn)))))
    ))
#+END_SRC

*** rainbow-delimiters
不同层次的括号显示不同的颜色

#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :ensure t
  :config
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))

#+END_SRC
*** modeline
#+begin_src emacs-lisp

#+end_src
*** ace-window
#+begin_src emacs-lisp
; ace-window
(use-package ace-window
  :defer t
  :custom
  (aw-background nil)
  :bind (("C-x o" . ace-window)))
#+end_src
*** treemacs
#+begin_src emacs-lisp
;; treemacs
(use-package treemacs
  :defer t
  :config
  (progn
    (setq treemacs-collapse-dirs              (if (executable-find "python") 3 0)
          treemacs-deferred-git-apply-delay   0.5
          treemacs-display-in-side-window     t
          treemacs-file-event-delay           5000
          treemacs-file-follow-delay          0.2
          treemacs-follow-after-init          t
          treemacs-follow-recenter-distance   0.1
          treemacs-goto-tag-strategy          'refetch-index
          treemacs-indentation                2
          treemacs-indentation-string         " "
          treemacs-is-never-other-window      t
          treemacs-no-png-images              nil
          treemacs-project-follow-cleanup     nil
          treemacs-persist-file               (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
          treemacs-recenter-after-file-follow nil
          treemacs-recenter-after-tag-follow  nil
          treemacs-show-hidden-files          t
          treemacs-silent-filewatch           nil
          treemacs-silent-refresh             nil
          treemacs-sorting                    'alphabetic-desc
          treemacs-space-between-root-nodes   t
          treemacs-tag-follow-cleanup         t
          treemacs-tag-follow-delay           1.5
          treemacs-width                      35)

    ;; The default width and height of the icons is 22 pixels. If you are
    ;; using a Hi-DPI display, uncomment this to double the icon size.
    (treemacs-resize-icons 44)

    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode t)
    (pcase (cons (not (null (executable-find "git")))
                 (not (null (executable-find "python3"))))
      (`(t . t)
       (treemacs-git-mode 'deferred))
      (`(t . _)
       (treemacs-git-mode 'simple))))
  :bind
  (:map global-map
	([f2] . treemacs-select-window)
        ("C-x t 1"   . treemacs-delete-other-windows)
        ("C-x t B"   . treemacs-bookmark)
        ("C-x t C-t" . treemacs-find-file)
        ("C-x t M-t" . treemacs-find-tag)))

(use-package treemacs-projectile
  :after (treemacs projectile))
#+end_src
*** Python language server
- **Install pyls server**

#+begin_src shell
pip3 install --user python-language-server
#+end_src

- **Configure lsp clients**

#+begin_src emacs-lisp
(use-package python-mode
  :config
  (add-hook 'python-mode-hook #'lsp))
(use-package conda
   :init
   (custom-set-variables '(conda-anaconda-home "~/miniconda3")))
#+end_src
*** Go(golang) language config
- **Install bingo language server**

#+begin_src shell
export http_proxy=http://127.0.0.1:58118
export https_proxy=http://127.0.0.1:58118
go get -u github.com/saibing/bingo
#+end_src

#+BEGIN_SRC emacs-lisp
(use-package go-mode
  :commands go-mode
  :mode (("\\.go?\\'" . go-mode))
  :init
  (add-hook 'go-mode-hook #'lsp)
  :config
  ;; 缩进设置
  (setq indent-tabs-mode nil)
  (setq c-basic-offset 4)
  (setq tab-width 4)
  ;; 保存前 lsp-format-buffer
  (add-hook 'before-save-hook 'lsp-format-buffer))
#+END_SRC
*** Java language support
- **Install eclipse java server**
#+begin_src shell
rm -rf ~/.emacs.d/eclipse.jdt.ls/server/
mkdir -p ~/.emacs.d/eclipse.jdt.ls/server/
wget http://download.eclipse.org/jdtls/snapshots/jdt-language-server-latest.tar.gz -O /tmp/jdt-latest.tar
tar xf /tmp/jdt-latest.tar -C ~/.emacs.d/eclipse.jdt.ls/server/
#+end_src

#+BEGIN_SRC emacs-lisp
(use-package lsp-java
:hook (java-mode . (lambda () (require 'lsp-java) (lsp))))
#+END_SRC

*** Rust lang support
- **Install rust server**

#+begin_src shell
rustup component add rls-preview rust-analysis rust-src
#+end_src

- **rust mode**

#+BEGIN_SRC emacs-lisp
(use-package rust-mode
  :ensure t
  :defer t
  :init
  (add-to-list 'auto-mode-alist '("\\.rs\\'" . rust-mode))
  (add-hook 'rust-mode-hook 'lsp)
  :config
  (setq rust-indent-offset 2))

(use-package cargo
  :ensure t
  :after rust-mode
)
#+END_SRC
*** Bash lang support

- **Install bash lang server**

#+begin_src shell
sudo npm i -g bash-language-server
#+end_src
*** HTML/CSS/JSON/JS/TS support

- **Install lang server**

#+begin_src shell
sudo npm install -g vscode-{html,css,json}-languageserver-bin
sudo npm install -g typescript-language-server
#+end_src
*** Yaml mode
#+begin_src emacs-lisp
(use-package yaml-mode
  :mode (("\\.ya?ml$" . yaml-mode))
  :ensure t
)
#+end_src

** Org
#+BEGIN_SRC emacs-lisp
(use-package org
:config
  (progn
    (add-to-list 'auto-mode-alist '("\\.\\(org\\|org_archive\\)$" . org-mode))
    ;; The following setting is different from the document so that you
    ;; can override the document org-agenda-files by setting your
    ;; org-agenda-files in the variable org-user-agenda-files
    ;;
    (if (boundp 'org-user-agenda-files)
        (setq org-agenda-files org-user-agenda-files)
      (setq org-agenda-files (quote ("~/Orgnote"))))

    (setq org-use-fast-todo-selection t)

    (setq org-treat-S-cursor-todo-selection-as-state-change nil)

    (setq org-todo-state-tags-triggers
          (quote (("CANCELLED" ("CANCELLED" . t))
                  ("WAITING" ("WAITING" . t))
                  ("HOLD" ("WAITING") ("HOLD" . t))
                  (done ("WAITING") ("HOLD"))
                  ("TODO" ("WAITING") ("CANCELLED") ("HOLD"))
                  ("NEXT" ("WAITING") ("CANCELLED") ("HOLD"))
                  ("DONE" ("WAITING") ("CANCELLED") ("HOLD")))))

    (setq org-directory "~/Orgnote")
    (setq org-default-notes-file (concat org-directory "/capture.org"))

                                        ; Targets include this file and any file contributing to the agenda - up to 9 levels deep
    (setq org-refile-targets (quote ((nil :maxlevel . 9)
                                     (org-agenda-files :maxlevel . 9))))

                                        ; Use full outline paths for refile targets - we file directly with IDO
    (setq org-refile-use-outline-path t)

                                        ; Targets complete directly with IDO
    (setq org-outline-path-complete-in-steps nil)

                                        ; Allow refile to create parent tasks with confirmation
    (setq org-refile-allow-creating-parent-nodes (quote confirm))

    ;; Custom agenda command definitions
    (setq org-agenda-custom-commands
          (quote (("N" "Notes" tags "NOTE"
                   ((org-agenda-overriding-header "Notes")
                    (org-tags-match-list-sublevels t)))
                  ("h" "Habits" tags-todo "STYLE=\"habit\""
                   ((org-agenda-overriding-header "Habits")
                    (org-agenda-sorting-strategy
                     '(todo-state-down effort-up category-keep))))
                  (" " "Agenda"
                   ((agenda "" nil)
                    (tags "REFILE"
                          ((org-agenda-overriding-header "Tasks to Refile")
                           (org-tags-match-list-sublevels nil)))
                    (tags-todo "-CANCELLED/!"
                               ((org-agenda-overriding-header "Stuck Projects")
                                (org-agenda-skip-function 'bh/skip-non-stuck-projects)
                                (org-agenda-sorting-strategy
                                 '(category-keep))))
                    (tags-todo "-HOLD-CANCELLED/!"
                               ((org-agenda-overriding-header "Projects")
                                (org-agenda-skip-function 'bh/skip-non-projects)
                                (org-tags-match-list-sublevels 'indented)
                                (org-agenda-sorting-strategy
                                 '(category-keep))))
                    (tags-todo "-CANCELLED/!NEXT"
                               ((org-agenda-overriding-header (concat "Project Next Tasks"
                                                                      (if bh/hide-scheduled-and-waiting-next-tasks
                                                                          ""
                                                                        " (including WAITING and SCHEDULED tasks)")))
                                (org-agenda-skip-function 'bh/skip-projects-and-habits-and-single-tasks)
                                (org-tags-match-list-sublevels t)
                                (org-agenda-todo-ignore-scheduled bh/hide-scheduled-and-waiting-next-tasks)
                                (org-agenda-todo-ignore-deadlines bh/hide-scheduled-and-waiting-next-tasks)
                                (org-agenda-todo-ignore-with-date bh/hide-scheduled-and-waiting-next-tasks)
                                (org-agenda-sorting-strategy
                                 '(todo-state-down effort-up category-keep))))
                    (tags-todo "-REFILE-CANCELLED-WAITING-HOLD/!"
                               ((org-agenda-overriding-header (concat "Project Subtasks"
                                                                      (if bh/hide-scheduled-and-waiting-next-tasks
                                                                          ""
                                                                        " (including WAITING and SCHEDULED tasks)")))
                                (org-agenda-skip-function 'bh/skip-non-project-tasks)
                                (org-agenda-todo-ignore-scheduled bh/hide-scheduled-and-waiting-next-tasks)
                                (org-agenda-todo-ignore-deadlines bh/hide-scheduled-and-waiting-next-tasks)
                                (org-agenda-todo-ignore-with-date bh/hide-scheduled-and-waiting-next-tasks)
                                (org-agenda-sorting-strategy
                                 '(category-keep))))
                    (tags-todo "-REFILE-CANCELLED-WAITING-HOLD/!"
                               ((org-agenda-overriding-header (concat "Standalone Tasks"
                                                                      (if bh/hide-scheduled-and-waiting-next-tasks
                                                                          ""
                                                                        " (including WAITING and SCHEDULED tasks)")))
                                (org-agenda-skip-function 'bh/skip-project-tasks)
                                (org-agenda-todo-ignore-scheduled bh/hide-scheduled-and-waiting-next-tasks)
                                (org-agenda-todo-ignore-deadlines bh/hide-scheduled-and-waiting-next-tasks)
                                (org-agenda-todo-ignore-with-date bh/hide-scheduled-and-waiting-next-tasks)
                                (org-agenda-sorting-strategy
                                 '(category-keep))))
                    (tags-todo "-CANCELLED+WAITING|HOLD/!"
                               ((org-agenda-overriding-header (concat "Waiting and Postponed Tasks"
                                                                      (if bh/hide-scheduled-and-waiting-next-tasks
                                                                          ""
                                                                        " (including WAITING and SCHEDULED tasks)")))
                                (org-agenda-skip-function 'bh/skip-non-tasks)
                                (org-tags-match-list-sublevels nil)
                                (org-agenda-todo-ignore-scheduled bh/hide-scheduled-and-waiting-next-tasks)
                                (org-agenda-todo-ignore-deadlines bh/hide-scheduled-and-waiting-next-tasks)))
                    (tags "-REFILE/"
                          ((org-agenda-overriding-header "Tasks to Archive")
                           (org-agenda-skip-function 'bh/skip-non-archivable-tasks)
                           (org-tags-match-list-sublevels nil))))
                   nil))))

    ;;
    ;; Resume clocking task when emacs is restarted
    (org-clock-persistence-insinuate)
    ;;
    ;; Show lot of clocking history so it's easy to pick items off the C-F11 list
    (setq org-clock-history-length 23)
    ;; Resume clocking task on clock-in if the clock is open
    (setq org-clock-in-resume t)
    ;; Change tasks to NEXT when clocking in
    (setq org-clock-in-switch-to-state 'bh/clock-in-to-next)
    ;; Separate drawers for clocking and logs
    (setq org-drawers (quote ("PROPERTIES" "LOGBOOK")))
    ;; Save clock data and state changes and notes in the LOGBOOK drawer
    (setq org-clock-into-drawer t)
    ;; Sometimes I change tasks I'm clocking quickly - this removes clocked tasks with 0:00 duration
    (setq org-clock-out-remove-zero-time-clocks t)
    ;; Clock out when moving task to a done state
    (setq org-clock-out-when-done t)
    ;; Save the running clock and all clock history when exiting Emacs, load it on startup
    (setq org-clock-persist t)
    ;; Do not prompt to resume an active clock
    (setq org-clock-persist-query-resume nil)
    ;; Enable auto clock resolution for finding open clocks
    (setq org-clock-auto-clock-resolution (quote when-no-clock-is-running))
    ;; Include current clocking task in clock reports
    (setq org-clock-report-include-clocking-task t)

    (setq org-time-stamp-rounding-minutes (quote (1 1)))

    (setq org-agenda-clock-consistency-checks
          (quote (:max-duration "4:00"
                                :min-duration 0
                                :max-gap 0
                                :gap-ok-around ("4:00"))))

    ;; Sometimes I change tasks I'm clocking quickly - this removes clocked tasks with 0:00 duration
    (setq org-clock-out-remove-zero-time-clocks t)

    ;; Agenda clock report parameters
    (setq org-agenda-clockreport-parameter-plist
          (quote (:link t :maxlevel 5 :fileskip0 t :compact t :narrow 80)))

                                        ; Set default column view headings: Task Effort Clock_Summary
    (setq org-columns-default-format "%80ITEM(Task) %10Effort(Effort){:} %10CLOCKSUM")

                                        ; global Effort estimate values
                                        ; global STYLE property values for completion
    (setq org-global-properties (quote (("Effort_ALL" . "0:15 0:30 0:45 1:00 2:00 3:00 4:00 5:00 6:00 0:00")
                                        ("STYLE_ALL" . "habit"))))

    ;; Agenda log mode items to display (closed and state changes by default)
    (setq org-agenda-log-mode-items (quote (closed state)))

                                        ; Tags with fast selection keys
    (setq org-tag-alist (quote ((:startgroup)
                                ("@errand" . ?e)
                                ("@office" . ?o)
                                ("@home" . ?H)
                                ("@farm" . ?f)
                                (:endgroup)
                                ("WAITING" . ?w)
                                ("HOLD" . ?h)
                                ("PERSONAL" . ?P)
                                ("WORK" . ?W)
                                ("FARM" . ?F)
                                ("ORG" . ?O)
                                ("NORANG" . ?N)
                                ("crypt" . ?E)
                                ("NOTE" . ?n)
                                ("CANCELLED" . ?c)
                                ("FLAGGED" . ??))))

                                        ; Allow setting single tags without the menu
    (setq org-fast-tag-selection-single-key (quote expert))

                                        ; For tag searches ignore tasks with scheduled and deadline dates
    (setq org-agenda-tags-todo-honor-ignore-options t)

    (setq org-agenda-span 'day)

    (setq org-stuck-projects (quote ("" nil nil "")))

    (setq org-archive-mark-done nil)
    (setq org-archive-location "%s_archive::* Archived Tasks")

    ;; TODO Install ditaa later
    (setq org-ditaa-jar-path "~/.emacs.d/software/ditaa.jar")
    (setq org-plantuml-jar-path "~/.emacs.d/software/plantuml.jar")

    (setq org-babel-python-command "python3")
    ; Make babel results blocks lowercase
    (setq org-babel-results-keyword "results")
    ;; active Babel languages
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((R . t)
       (latex . t)
       (python . t)
       (dot . t)
       (ditaa . t)
       (plantuml . t)
       (shell . t)
       (emacs-lisp . nil)))

    (defun bh/display-inline-images ()
      (condition-case nil
          (org-display-inline-images)
        (error nil)))

                                        ; Do not prompt to confirm evaluation
                                        ; This may be dangerous - make sure you understand the consequences
                                        ; of setting this -- see the docstring for details
    (setq org-confirm-babel-evaluate nil)

                                        ; Use fundamental mode when editing plantuml blocks with C-c '
    (add-to-list 'org-src-lang-modes (quote ("plantuml" . fundamental)))

    ;; Don't enable this because it breaks access to emacs from my Android phone
    (setq org-startup-with-inline-images nil)

                                        ; Inline images in HTML instead of producting links to the image
    (setq org-html-inline-images t)
                                        ; Do not use sub or superscripts - I currently don't need this functionality in my documents
    (setq org-export-with-sub-superscripts nil)
                                        ; Use org.css from the norang website for export document stylesheets
    (setq org-html-head-extra "<link rel=\"stylesheet\" href=\"http://doc.norang.ca/org.css\" type=\"text/css\" />")
    (setq org-html-head-include-default-style nil)
                                        ; Do not generate internal css formatting for HTML exports
    (setq org-export-htmlize-output-type (quote css))
                                        ; Export with LaTeX fragments
    (setq org-export-with-LaTeX-fragments t)
                                        ; Increase default number of headings to export
    (setq org-export-headline-levels 6)

                                        ; List of projects
                                        ; norang       - http://www.norang.ca/
                                        ; doc          - http://doc.norang.ca/
                                        ; org-mode-doc - http://doc.norang.ca/org-mode.html and associated files
                                        ; org          - miscellaneous todo lists for publishing
    (setq org-publish-project-alist
                                        ;
                                        ; http://www.norang.ca/  (norang website)
                                        ; norang-org are the org-files that generate the content
                                        ; norang-extra are images and css files that need to be included
                                        ; norang is the top-level project that gets published
          (quote (("norang-org"
                   :base-directory "~/AeroFS/www.norang.ca"
                   :publishing-directory "/ssh:www-data@www:~/www.norang.ca/htdocs"
                   :recursive t
                   :table-of-contents nil
                   :base-extension "org"
                   :publishing-function org-html-publish-to-html
                   :style-include-default nil
                   :section-numbers nil
                   :table-of-contents nil
                   :html-head "<link rel=\"stylesheet\" href=\"norang.css\" type=\"text/css\" />"
                   :author-info nil
                   :creator-info nil)
                  ("norang-extra"
                   :base-directory "~/AeroFS/www.norang.ca/"
                   :publishing-directory "/ssh:www-data@www:~/www.norang.ca/htdocs"
                   :base-extension "css\\|pdf\\|png\\|jpg\\|gif"
                   :publishing-function org-publish-attachment
                   :recursive t
                   :author nil)
                  ("norang"
                   :components ("norang-org" "norang-extra"))
                                        ;
                                        ; http://doc.norang.ca/  (norang website)
                                        ; doc-org are the org-files that generate the content
                                        ; doc-extra are images and css files that need to be included
                                        ; doc is the top-level project that gets published
                  ("doc-org"
                   :base-directory "~/AeroFS/doc.norang.ca/"
                   :publishing-directory "/ssh:www-data@www:~/doc.norang.ca/htdocs"
                   :recursive nil
                   :section-numbers nil
                   :table-of-contents nil
                   :base-extension "org"
                   :publishing-function (org-html-publish-to-html org-org-publish-to-org)
                   :style-include-default nil
                   :html-head "<link rel=\"stylesheet\" href=\"/org.css\" type=\"text/css\" />"
                   :author-info nil
                   :creator-info nil)
                  ("doc-extra"
                   :base-directory "~/AeroFS/doc.norang.ca/"
                   :publishing-directory "/ssh:www-data@www:~/doc.norang.ca/htdocs"
                   :base-extension "css\\|pdf\\|png\\|jpg\\|gif"
                   :publishing-function org-publish-attachment
                   :recursive nil
                   :author nil)
                  ("doc"
                   :components ("doc-org" "doc-extra"))
                  ("doc-private-org"
                   :base-directory "~/AeroFS/doc.norang.ca/private"
                   :publishing-directory "/ssh:www-data@www:~/doc.norang.ca/htdocs/private"
                   :recursive nil
                   :section-numbers nil
                   :table-of-contents nil
                   :base-extension "org"
                   :publishing-function (org-html-publish-to-html org-org-publish-to-org)
                   :style-include-default nil
                   :html-head "<link rel=\"stylesheet\" href=\"/org.css\" type=\"text/css\" />"
                   :auto-sitemap t
                   :sitemap-filename "index.html"
                   :sitemap-title "Norang Private Documents"
                   :sitemap-style "tree"
                   :author-info nil
                   :creator-info nil)
                  ("doc-private-extra"
                   :base-directory "~/AeroFS/doc.norang.ca/private"
                   :publishing-directory "/ssh:www-data@www:~/doc.norang.ca/htdocs/private"
                   :base-extension "css\\|pdf\\|png\\|jpg\\|gif"
                   :publishing-function org-publish-attachment
                   :recursive nil
                   :author nil)
                  ("doc-private"
                   :components ("doc-private-org" "doc-private-extra"))
                                        ;
                                        ; Miscellaneous pages for other websites
                                        ; org are the org-files that generate the content
                  ("org-org"
                   :base-directory "~/AeroFS/org/"
                   :publishing-directory "/ssh:www-data@www:~/org"
                   :recursive t
                   :section-numbers nil
                   :table-of-contents nil
                   :base-extension "org"
                   :publishing-function org-html-publish-to-html
                   :style-include-default nil
                   :html-head "<link rel=\"stylesheet\" href=\"/org.css\" type=\"text/css\" />"
                   :author-info nil
                   :creator-info nil)
                                        ;
                                        ; http://doc.norang.ca/  (norang website)
                                        ; org-mode-doc-org this document
                                        ; org-mode-doc-extra are images and css files that need to be included
                                        ; org-mode-doc is the top-level project that gets published
                                        ; This uses the same target directory as the 'doc' project
                  ("org-mode-doc-org"
                   :base-directory "~/AeroFS/org-mode-doc/"
                   :publishing-directory "/ssh:www-data@www:~/doc.norang.ca/htdocs"
                   :recursive t
                   :section-numbers nil
                   :table-of-contents nil
                   :base-extension "org"
                   :publishing-function (org-html-publish-to-html)
                   :plain-source t
                   :htmlized-source t
                   :style-include-default nil
                   :html-head "<link rel=\"stylesheet\" href=\"/org.css\" type=\"text/css\" />"
                   :author-info nil
                   :creator-info nil)
                  ("org-mode-doc-extra"
                   :base-directory "~/AeroFS/org-mode-doc/"
                   :publishing-directory "/ssh:www-data@www:~/doc.norang.ca/htdocs"
                   :base-extension "css\\|pdf\\|png\\|jpg\\|gif\\|org"
                   :publishing-function org-publish-attachment
                   :recursive t
                   :author nil)
                  ("org-mode-doc"
                   :components ("org-mode-doc-org" "org-mode-doc-extra"))
                                        ;
                                        ; http://doc.norang.ca/  (norang website)
                                        ; org-mode-doc-org this document
                                        ; org-mode-doc-extra are images and css files that need to be included
                                        ; org-mode-doc is the top-level project that gets published
                                        ; This uses the same target directory as the 'doc' project
                  ("tmp-org"
                   :base-directory "/tmp/publish/"
                   :publishing-directory "/ssh:www-data@www:~/www.norang.ca/htdocs/tmp"
                   :recursive t
                   :section-numbers nil
                   :table-of-contents nil
                   :base-extension "org"
                   :publishing-function (org-html-publish-to-html org-org-publish-to-org)
                   :html-head "<link rel=\"stylesheet\" href=\"http://doc.norang.ca/org.css\" type=\"text/css\" />"
                   :plain-source t
                   :htmlized-source t
                   :style-include-default nil
                   :auto-sitemap t
                   :sitemap-filename "index.html"
                   :sitemap-title "Test Publishing Area"
                   :sitemap-style "tree"
                   :author-info t
                   :creator-info t)
                  ("tmp-extra"
                   :base-directory "/tmp/publish/"
                   :publishing-directory "/ssh:www-data@www:~/www.norang.ca/htdocs/tmp"
                   :base-extension "css\\|pdf\\|png\\|jpg\\|gif"
                   :publishing-function org-publish-attachment
                   :recursive t
                   :author nil)
                  ("tmp"
                   :components ("tmp-org" "tmp-extra")))))

    ;; Enable abbrev-mode
    (add-hook 'org-mode-hook (lambda () (abbrev-mode 1)))

    ;; Skeletons
    ;;
    ;; sblk - Generic block #+begin_FOO .. #+end_FOO
    (define-skeleton skel-org-block
      "Insert an org block, querying for type."
      "Type: "
      "#+begin_" str "\n"
      _ - \n
      "#+end_" str "\n")

    (define-abbrev org-mode-abbrev-table "sblk" "" 'skel-org-block)

    ;; splantuml - PlantUML Source block
    (define-skeleton skel-org-block-plantuml
      "Insert a org plantuml block, querying for filename."
      "File (no extension): "
      "#+begin_src plantuml :file " str ".png :cache yes\n"
      _ - \n
      "#+end_src\n")

    (define-abbrev org-mode-abbrev-table "splantuml" "" 'skel-org-block-plantuml)

    (define-skeleton skel-org-block-plantuml-activity
      "Insert a org plantuml block, querying for filename."
      "File (no extension): "
      "#+begin_src plantuml :file " str "-act.png :cache yes :tangle " str "-act.txt\n"
      (bh/plantuml-reset-counters)
      "@startuml\n"
      "skinparam activity {\n"
      "BackgroundColor<<New>> Cyan\n"
      "}\n\n"
      "title " str " - \n"
      "note left: " str "\n"
      "(*) --> \"" str "\"\n"
      "--> (*)\n"
      _ - \n
      "@enduml\n"
      "#+end_src\n")

    (defvar bh/plantuml-if-count 0)

    (defun bh/plantuml-if ()
      (incf bh/plantuml-if-count)
      (number-to-string bh/plantuml-if-count))

    (defvar bh/plantuml-loop-count 0)

    (defun bh/plantuml-loop ()
      (incf bh/plantuml-loop-count)
      (number-to-string bh/plantuml-loop-count))

    (defun bh/plantuml-reset-counters ()
      (setq bh/plantuml-if-count 0
            bh/plantuml-loop-count 0)
      "")

    (define-abbrev org-mode-abbrev-table "sact" "" 'skel-org-block-plantuml-activity)

    (define-skeleton skel-org-block-plantuml-activity-if
      "Insert a org plantuml block activity if statement"
      ""
      "if \"\" then\n"
      "  -> [condition] ==IF" (setq ifn (bh/plantuml-if)) "==\n"
      "  --> ==IF" ifn "M1==\n"
      "  -left-> ==IF" ifn "M2==\n"
      "else\n"
      "end if\n"
      "--> ==IF" ifn "M2==")

    (define-abbrev org-mode-abbrev-table "sif" "" 'skel-org-block-plantuml-activity-if)

    (define-skeleton skel-org-block-plantuml-activity-for
      "Insert a org plantuml block activity for statement"
      "Loop for each: "
      "--> ==LOOP" (setq loopn (bh/plantuml-loop)) "==\n"
      "note left: Loop" loopn ": For each " str "\n"
      "--> ==ENDLOOP" loopn "==\n"
      "note left: Loop" loopn ": End for each " str "\n" )

    (define-abbrev org-mode-abbrev-table "sfor" "" 'skel-org-block-plantuml-activity-for)

    (define-skeleton skel-org-block-plantuml-sequence
      "Insert a org plantuml activity diagram block, querying for filename."
      "File appends (no extension): "
      "#+begin_src plantuml :file " str "-seq.png :cache yes :tangle " str "-seq.txt\n"
      "@startuml\n"
      "title " str " - \n"
      "actor CSR as \"Customer Service Representative\"\n"
      "participant CSMO as \"CSM Online\"\n"
      "participant CSMU as \"CSM Unix\"\n"
      "participant NRIS\n"
      "actor Customer"
      _ - \n
      "@enduml\n"
      "#+end_src\n")

    (define-abbrev org-mode-abbrev-table "sseq" "" 'skel-org-block-plantuml-sequence)

    ;; sdot - Graphviz DOT block
    (define-skeleton skel-org-block-dot
      "Insert a org graphviz dot block, querying for filename."
      "File (no extension): "
      "#+begin_src dot :file " str ".png :cache yes :cmdline -Kdot -Tpng\n"
      "graph G {\n"
      _ - \n
      "}\n"
      "#+end_src\n")

    (define-abbrev org-mode-abbrev-table "sdot" "" 'skel-org-block-dot)

    ;; sditaa - Ditaa source block
    (define-skeleton skel-org-block-ditaa
      "Insert a org ditaa block, querying for filename."
      "File (no extension): "
      "#+begin_src ditaa :file " str ".png :cache yes\n"
      _ - \n
      "#+end_src\n")

    (define-abbrev org-mode-abbrev-table "sditaa" "" 'skel-org-block-ditaa)

    ;; selisp - Emacs Lisp source block
    (define-skeleton skel-org-block-elisp
      "Insert a org emacs-lisp block"
      ""
      "#+begin_src emacs-lisp\n"
      _ - \n
      "#+end_src\n")

    (define-abbrev org-mode-abbrev-table "selisp" "" 'skel-org-block-elisp)

    ;; Limit restriction lock highlighting to the headline only
    (setq org-agenda-restriction-lock-highlight-subtree nil)

    ;; Keep tasks with dates on the global todo lists
    (setq org-agenda-todo-ignore-with-date nil)

    ;; Keep tasks with deadlines on the global todo lists
    (setq org-agenda-todo-ignore-deadlines nil)

    ;; Keep tasks with scheduled dates on the global todo lists
    (setq org-agenda-todo-ignore-scheduled nil)

    ;; Keep tasks with timestamps on the global todo lists
    (setq org-agenda-todo-ignore-timestamp nil)

    ;; Remove completed deadline tasks from the agenda view
    (setq org-agenda-skip-deadline-if-done t)

    ;; Remove completed scheduled tasks from the agenda view
    (setq org-agenda-skip-scheduled-if-done t)

    ;; Remove completed items from search results
    (setq org-agenda-skip-timestamp-if-done t)

    (setq org-agenda-include-diary nil)
    (setq org-agenda-diary-file "~/Orgnote/diary.org")

    (setq org-agenda-insert-diary-extract-time t)

    ;; Include agenda archive files when searching for things
    (setq org-agenda-text-search-extra-files (quote (agenda-archives)))

    ;; Show all future entries for repeating tasks
    (setq org-agenda-repeating-timestamp-show-all t)

    ;; Show all agenda dates - even if they are empty
    (setq org-agenda-show-all-dates t)

    ;; Sorting order for tasks on the agenda
    (setq org-agenda-sorting-strategy
          (quote ((agenda habit-down time-up user-defined-up effort-up category-keep)
                  (todo category-up effort-up)
                  (tags category-up effort-up)
                  (search category-up))))

    ;; Start the weekly agenda on Monday
    (setq org-agenda-start-on-weekday 1)

    ;; Enable display of the time grid so we can see the marker for the current time
    (setq org-agenda-time-grid (quote ((daily today remove-match)
                                       #("----------------" 0 16 (org-heading t))
                                       (0900 1100 1300 1500 1700))))

    ;; Display tags farther right
    (setq org-agenda-tags-column -102)

    ;;
    ;; Agenda sorting functions
    ;;
    (setq org-enforce-todo-dependencies t)

    (setq org-hide-leading-stars nil)

    (setq org-startup-indented t)

    (setq org-cycle-separator-lines 0)

    (setq org-blank-before-new-entry (quote ((heading)
                                             (plain-list-item . auto))))

    (setq org-insert-heading-respect-content nil)

    (setq org-reverse-note-order nil)

    (setq org-show-following-heading t)
    (setq org-show-hierarchy-above t)
    (setq org-show-siblings (quote ((default))))

    (setq org-special-ctrl-a/e t)
    (setq org-special-ctrl-k t)
    (setq org-yank-adjusted-subtrees t)

    (setq org-id-method (quote uuidgen))

    (setq org-deadline-warning-days 30)

    (setq org-table-export-default-format "orgtbl-to-csv")

                                        ; Use the current window for C-c ' source editing
    (setq org-src-window-setup 'current-window)

    (setq org-log-done (quote time))
    (setq org-log-into-drawer t)
    (setq org-log-state-notes-insert-after-drawers nil)

                                        ; Enable habit tracking (and a bunch of other modules)
    (setq org-modules (quote (org-bibtex
                              org-crypt
                              org-id
                              org-info
                              org-jsinfo
                              org-habit
                              org-inlinetask
                              org-irc
                              org-mew
                              org-mhe
                              org-protocol
                              org-rmail
                              org-vm
                              org-wl
                              org-w3m)))

                                        ; position the habit graph on the agenda to the right of the default
    (setq org-habit-graph-column 50)

    (run-at-time "06:00" 86400 '(lambda () (setq org-habit-show-habits t)))

    (global-auto-revert-mode t)

    (require 'org-crypt)
                                        ; Encrypt all entries before saving
    (org-crypt-use-before-save-magic)
    (setq org-tags-exclude-from-inheritance (quote ("crypt")))
                                        ; GPG key to use for encryption
    (setq org-crypt-key "F0B66B40")

    (setq org-crypt-disable-auto-save nil)

    (setq org-use-speed-commands t)
    (setq org-speed-commands-user (quote (("0" . ignore)
                                          ("1" . ignore)
                                          ("2" . ignore)
                                          ("3" . ignore)
                                          ("4" . ignore)
                                          ("5" . ignore)
                                          ("6" . ignore)
                                          ("7" . ignore)
                                          ("8" . ignore)
                                          ("9" . ignore)

                                          ("a" . ignore)
                                          ("d" . ignore)
                                          ("h" . bh/hide-other)
                                          ("i" progn
                                           (forward-char 1)
                                           (call-interactively 'org-insert-heading-respect-content))
                                          ("k" . org-kill-note-or-show-branches)
                                          ("l" . ignore)
                                          ("m" . ignore)
                                          ("q" . bh/show-org-agenda)
                                          ("r" . ignore)
                                          ("s" . org-save-all-org-buffers)
                                          ("w" . org-refile)
                                          ("x" . ignore)
                                          ("y" . ignore)
                                          ("z" . org-add-note)

                                          ("A" . ignore)
                                          ("B" . ignore)
                                          ("E" . ignore)
                                          ("F" . bh/restrict-to-file-or-follow)
                                          ("G" . ignore)
                                          ("H" . ignore)
                                          ("J" . org-clock-goto)
                                          ("K" . ignore)
                                          ("L" . ignore)
                                          ("M" . ignore)
                                          ("N" . bh/narrow-to-org-subtree)
                                          ("P" . bh/narrow-to-org-project)
                                          ("Q" . ignore)
                                          ("R" . ignore)
                                          ("S" . ignore)
                                          ("T" . bh/org-todo)
                                          ("U" . bh/narrow-up-one-org-level)
                                          ("V" . ignore)
                                          ("W" . bh/widen)
                                          ("X" . ignore)
                                          ("Y" . ignore)
                                          ("Z" . ignore))))

    (defun bh/show-org-agenda ()
      (interactive)
      (if org-agenda-sticky
          (switch-to-buffer "*Org Agenda( )*")
        (switch-to-buffer "*Org Agenda*"))
      (delete-other-windows))

    (require 'org-protocol)

    (setq require-final-newline t)

    (setq org-remove-highlights-with-change t)

    (setq org-read-date-prefer-future 'time)

    (setq org-list-demote-modify-bullet (quote (("+" . "-")
                                                ("*" . "-")
                                                ("1." . "-")
                                                ("1)" . "-")
                                                ("A)" . "-")
                                                ("B)" . "-")
                                                ("a)" . "-")
                                                ("b)" . "-")
                                                ("A." . "-")
                                                ("B." . "-")
                                                ("a." . "-")
                                                ("b." . "-"))))

    (setq org-tags-match-list-sublevels t)

    (setq org-agenda-persistent-filter t)

    (setq org-link-mailto-program (quote (compose-mail "%a" "%s")))

    ;; Bookmark handling
    ;;
    (global-set-key (kbd "<C-f6>") '(lambda () (interactive) (bookmark-set "SAVED")))
    (global-set-key (kbd "<f6>") '(lambda () (interactive) (bookmark-jump "SAVED")))

                                        ;(require 'org-mime)

    (setq org-agenda-skip-additional-timestamps-same-entry t)

    (setq org-table-use-standard-references (quote from))

    (setq org-file-apps (quote ((auto-mode . emacs)
                                ("\\.mm\\'" . system)
                                ("\\.x?html?\\'" . system)
                                ("\\.pdf\\'" . system))))

                                        ; Overwrite the current window with the agenda
    (setq org-agenda-window-setup 'current-window)

    (setq org-clone-delete-id t)

    (setq org-cycle-include-plain-lists t)

    (setq org-src-fontify-natively t)

    (setq org-structure-template-alist
          (quote (("s" "#+begin_src ?\n\n#+end_src" "<src lang=\"?\">\n\n</src>")
                  ("e" "#+begin_example\n?\n#+end_example" "<example>\n?\n</example>")
                  ("q" "#+begin_quote\n?\n#+end_quote" "<quote>\n?\n</quote>")
                  ("v" "#+begin_verse\n?\n#+end_verse" "<verse>\n?\n</verse>")
                  ("c" "#+begin_center\n?\n#+end_center" "<center>\n?\n</center>")
                  ("l" "#+begin_latex\n?\n#+end_latex" "<literal style=\"latex\">\n?\n</literal>")
                  ("L" "#+latex: " "<literal style=\"latex\">?</literal>")
                  ("h" "#+begin_html\n?\n#+end_html" "<literal style=\"html\">\n?\n</literal>")
                  ("H" "#+html: " "<literal style=\"html\">?</literal>")
                  ("a" "#+begin_ascii\n?\n#+end_ascii")
                  ("A" "#+ascii: ")
                  ("i" "#+index: ?" "#+index: ?")
                  ("I" "#+include %file ?" "<include file=%file markup=\"?\">"))))

    (setq org-startup-folded t)

    ;; flyspell mode for spell checking everywhere
    (add-hook 'org-mode-hook 'turn-on-flyspell 'append)

    ;; Disable keys in org-mode
    ;;    C-c [
    ;;    C-c ]
    ;;    C-c ;
    ;;    C-c C-x C-q  cancelling the clock (we never want this)
    (add-hook 'org-mode-hook
              '(lambda ()
                 ;; Undefine C-c [ and C-c ] since this breaks my
                 ;; org-agenda files when directories are include It
                 ;; expands the files in the directories individually
                 (org-defkey org-mode-map "\C-c[" 'undefined)
                 (org-defkey org-mode-map "\C-c]" 'undefined)
                 (org-defkey org-mode-map "\C-c;" 'undefined)
                 (org-defkey org-mode-map "\C-c\C-x\C-q" 'undefined))
              'append)

    (setq org-src-preserve-indentation nil)
    (setq org-edit-src-content-indentation 0)

    (setq org-catch-invisible-edits 'error)

    (setq org-export-coding-system 'utf-8)
    (prefer-coding-system 'utf-8)
    (set-charset-priority 'unicode)
    (setq default-process-coding-system '(utf-8-unix . utf-8-unix))

    (setq org-time-clocksum-format
          '(:hours "%d" :require-hours t :minutes ":%02d" :require-minutes t))

    (setq org-id-link-to-org-use-id 'create-if-interactive-and-no-custom-id)

    (setq org-emphasis-alist (quote (("*" bold "<b>" "</b>")
                                     ("/" italic "<i>" "</i>")
                                     ("_" underline "<span style=\"text-decoration:underline;\">" "</span>")
                                     ("=" org-code "<code>" "</code>" verbatim)
                                     ("~" org-verbatim "<code>" "</code>" verbatim))))

    (setq org-use-sub-superscripts nil)

    (setq org-odd-levels-only nil)

    (run-at-time "00:59" 3600 'org-save-all-org-buffers)

    ;; Org Mode LaTeX Export
    (require 'ox-latex)
    (require 'ox-beamer)

    (setq org-latex-compiler "xelatex") ; introduced in org 9.0
;    (setq org-latex-toc-command  "\\newpage\n\n\\tableofcontents\n\n\\newpage\n\n")
    ;; Previewing latex fragments in Org mode
    ;; https://orgmode.org/worg/org-tutorials/org-latex-preview.html
    (setq org-latex-create-formula-image-program 'imagemagick) ;Recommended

    ;; Controlling the order of loading certain packages w.r.t. `hyperref'
    ;; http://tex.stackexchange.com/a/1868/52678
    ;; ftp://ftp.ctan.org/tex-archive/macros/latex/contrib/hyperref/README.pdf
    ;; Remove the list element in `org-latex-default-packages-alist'.
    ;; that has '("hyperref" nil) as its cdr.
    ;; http://stackoverflow.com/a/9813211/1219634
    (setq org-latex-default-packages-alist
          (delq (rassoc '("hyperref" nil) org-latex-default-packages-alist)
                org-latex-default-packages-alist))
    ;; `hyperref' will be added again later in `org-latex-packages-alist'
    ;; in the correct order.

    ;; The `org-latex-packages-alist' will output tex files with
    ;;   \usepackage[FIRST STRING IF NON-EMPTY]{SECOND STRING}
    ;; It is a list of cells of the format:
    ;;   ("options" "package" SNIPPET-FLAG COMPILERS)
    ;; If SNIPPET-FLAG is non-nil, the package also needs to be included
    ;; when compiling LaTeX snippets into images for inclusion into
    ;; non-LaTeX output (like when previewing latex fragments using the
    ;; "C-c C-x C-l" binding.
    ;; COMPILERS is a list of compilers that should include the package,
    ;; see `org-latex-compiler'.  If the document compiler is not in the
    ;; list, and the list is non-nil, the package will not be inserted
    ;; in the final document.

    (defconst modi/org-latex-packages-alist-pre-hyperref
      '(("letterpaper,margin=1.0in" "geometry")
        ;; Prevent an image from floating to a different location.
        ;; http://tex.stackexchange.com/a/8633/52678
        ("" "float")
        ;; % 0 paragraph indent, adds vertical space between paragraphs
        ;; http://en.wikibooks.org/wiki/LaTeX/Paragraph_Formatting
        ("" "parskip"))
      "Alist of packages that have to be loaded before `hyperref'
package is loaded.
ftp://ftp.ctan.org/tex-archive/macros/latex/contrib/hyperref/README.pdf ")

    (defconst modi/org-latex-packages-alist-post-hyperref
      '(;; Prevent tables/figures from one section to float into another section
        ;; http://tex.stackexchange.com/a/282/52678
        ("section" "placeins")
        ;; Graphics package for more complicated figures
        ("" "tikz")
        ("" "caption")
        ;;
        ;; Packages suggested to be added for previewing latex fragments
        ;; https://orgmode.org/worg/org-tutorials/org-latex-preview.html
        ("mathscr" "eucal")
        ("" "latexsym"))
      "Alist of packages that have to (or can be) loaded after `hyperref'
package is loaded.")

    (defconst modi/org-latex-packages-alist-zhfont
      '("
%%% 设置中文字体 %%%
% https://www.zhihu.com/question/20563044
% 衬线字体
\\setCJKmainfont[BoldFont = Source Han Sans CN,ItalicFont = FandolKai]{Source Han Serif CN}
% 无衬线字体同上
\\setCJKsansfont[BoldFont = Source Han Sans CN,ItalicFont = FandolKai]{Source Han Sans CN}
% 等宽字体/打印机字体
\\setCJKmonofont[BoldFont = Source Han Sans CN,ItalicFont = FandolKai]{Source Han Sans CN}

\setCJKfamilyfont{zhsong}{Source Han Serif CN}
\setCJKfamilyfont{zhhei}{Source Han Sans CN}
\setCJKfamilyfont{zhkai}{FandolKai}

%%% Prefer the free fonts %%%
\\setmainfont{Roboto Slab Light}
\\setsansfont{Roboto Light}
\\setmonofont{Roboto Mono Light}

"))
    ;; The "H" option (`float' package) prevents images from floating around.
    (setq org-latex-default-figure-position "H") ;figures are NOT floating
    ;; (setq org-latex-default-figure-position "htb") ;default - figures are floating

    ;; `hyperref' package setup
    (setq org-latex-hyperref-template
          (concat "\\hypersetup{\n"
                  "pdfauthor={%a},\n"
                  "pdftitle={%t},\n"
                  "pdfkeywords={%k},\n"
                  "pdfsubject={%d},\n"
                  "pdfcreator={%c},\n"
                  "pdflang={%L},\n"
                  ;; Get rid of the red boxes drawn around the links
                  "colorlinks,\n"
                  "citecolor=black,\n"
                  "filecolor=black,\n"
                  "linkcolor=blue,\n"
                  "urlcolor=blue\n"
                  "}"))
;    (defvar modi/ox-latex-use-minted t
;      "Use `minted' package for listings.")
;
;    (if modi/ox-latex-use-minted
;        ;; using minted
;        ;; https://github.com/gpoore/minted
;        (progn
;          (setq org-latex-listings 'minted) ;default nil
;          ;; The default value of the `minted' package option `cachedir'
;          ;; is "_minted-\jobname". That clutters the working dirs with
;          ;; _minted* dirs. So instead create them in temp folders.
;          (defvar latex-minted-cachedir
;            (file-name-as-directory
;             (expand-file-name ".minted/\\jobname" modi/temporary-file-directory)))
;          ;; `minted' package needed to be loaded AFTER `hyperref'.
;          ;; http://tex.stackexchange.com/a/19586/52678
;          (add-to-list 'modi/org-latex-packages-alist-post-hyperref
;                       `(,(concat "cachedir=" ;options
;                                  latex-minted-cachedir)
;                         "minted" ;package
;                         ;; If `org-latex-create-formula-image-program'
;                         ;; is set to `dvipng', minted package cannot be
;                         ;; used to show latex previews.
;                         ,(not (eq org-latex-create-formula-image-program 'dvipng)))) ;snippet-flag
;
;          ;; minted package options (applied to embedded source codes)
;          (setq org-latex-minted-options
;                '(("linenos")
;                  ("numbersep" "5pt")
;                  ("frame"     "none") ;box frame is created by `mdframed' package
;                  ("framesep"  "2mm")
;                  ;; minted 2.0+ required for `breaklines'
;                  ("breaklines"))) ;line wrapping within code blocks
;          (when (equal org-latex-compiler "pdflatex")
;            (add-to-list 'org-latex-minted-options '(("fontfamily"  "zi4")))))
;      ;; not using minted
;      (progn
;        ;; Commented out below because it clashes with `placeins' package
;        ;; (add-to-list 'modi/org-latex-packages-alist-post-hyperref '("" "color"))
;        (add-to-list 'modi/org-latex-packages-alist-post-hyperref '("" "listings"))))
;
    (setq org-latex-packages-alist
          (append modi/org-latex-packages-alist-pre-hyperref
                  '(("" "hyperref" nil))
                  modi/org-latex-packages-alist-zhfont
                  modi/org-latex-packages-alist-post-hyperref))

    ;; `-shell-escape' is required when using the `minted' package
                                        ;http://emacs-china.org/blog/2015/04/20/%E4%BD%BF%E7%94%A8-ctex-%E5%B0%86-org-%E6%96%87%E4%BB%B6%E8%BD%AC%E5%8C%96%E4%B8%BA-pdf/
    (setq org-latex-default-class "ctexart")
    (add-to-list 'org-latex-classes
                 '("ctexart"
                   "\\documentclass[UTF8,a4paper]{ctexart}"
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                   ("\\paragraph{%s}" . "\\paragraph*{%s}")
                   ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

    (add-to-list 'org-latex-classes
                 '("ctexrep"
                   "\\documentclass[fancyhdr,fntef,nofonts,UTF8,a4paper,cs4size]{ctexrep}"
                   ("\\part{%s}" . "\\part*{%s}")
                   ("\\chapter{%s}" . "\\chapter*{%s}")
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))

    (add-to-list 'org-latex-classes
                 '("ctexbook"
                   "\\documentclass[fancyhdr,fntef,nofonts,UTF8,a4paper,cs4size]{ctexbook}"
                   ("\\part{%s}" . "\\part*{%s}")
                   ("\\chapter{%s}" . "\\chapter*{%s}")
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))

    (add-to-list 'org-latex-classes
                 '("beamer"
                   "\\documentclass\[presentation\]\{ctexbeamer\}"
                   ("\\section\{%s\}" . "\\section*\{%s\}")
                   ("\\subsection\{%s\}" . "\\subsection*\{%s\}")
                   ("\\subsubsection\{%s\}" . "\\subsubsection*\{%s\}")))

    ;; latex公式预览, 调整latex预览时使用的header,默认使用ctexart类
    (setq org-format-latex-header
          (replace-regexp-in-string
           "\\\\documentclass{.*}"
           "\\\\documentclass[nofonts,UTF8]{ctexart}"
           org-format-latex-header))

    (setq org-beamer-theme nil)
    (setq org-latex-commands
          '(("xelatex -interaction nonstopmode -output-directory %o %f"
             "bibtex %b"
             "xelatex -interaction nonstopmode -output-directory %o %f"
             "xelatex -interaction nonstopmode -output-directory %o %f")
            ("xelatex -interaction nonstopmode -output-directory %o %f")))

    (defun my-org-latex-compile (orig-fun texfile &optional snippet)
      (let ((org-latex-pdf-process
             (if snippet (car (cdr org-latex-commands))
               (car org-latex-commands))))
        (funcall orig-fun texfile snippet)))

    (advice-add 'org-latex-compile :around #'my-org-latex-compile)

    ;; 指定你要用什麼外部 app 來開 pdf 之類的檔案。我是偷懶所以直接用 evince，你也可以指定其他的。
    (setq org-file-apps '((auto-mode . emacs)
                          ("\\.mm\\'" . default)
                          ("\\.x?html?\\'" . "xdg-open %s")
                          ("\\.pdf\\'" . "evince %s")
                          ("\\.jpg\\'" . "geeqie %s")))

    ))
#+END_SRC

** Set theme
*** Theme
[[https://www.monokai.pro/][Beautiful functionality for professional developers]]

#+begin_src emacs-lisp
;(use-package monokai-theme
;  :ensure t
;  :config
;  (load-theme 'monokai t))
#+END_SRC

*** Font

主要是让中英文等宽，参考链接：https://emacs-china.org/t/topic/440

#+BEGIN_SRC
(defun my-default-font()
  (interactive)

  ;; english font
  (set-face-attribute 'default nil :font (format   "%s:pixelsize=%d" "Source Code Pro" 17))
  ;; chinese font
  (dolist (charset '(kana han symbol cjk-misc bopomofo))
    (set-fontset-font (frame-parameter nil 'font)
    charset
    (font-spec :family "WenQuanYi Micro Hei Mono" :size 20))))

(add-to-list 'after-make-frame-functions
   (lambda (new-frame)
   (select-frame new-frame)
   (if window-system
   (my-default-font)
   )))

(if window-system
  (my-default-font)
)

#+END_SRC

** Chinese input method

Use ibus to replace pyim for 中文输入。

** Reference
*** [[https://jamiecollinson.com/blog/my-emacs-config/][My Emacs Config]]
*** [[http://blog.csdn.net/redguardtoo/article/details/7222501][一年成为Emacs高手(像神一样使用编辑器)]]
*** [[https://github.com/emacs-lsp/lsp-mode][Emacs client/library for the Language Server Protocol]]
*** [[https://github.com/tigersoldier/company-lsp][Company completion backend for lsp-mode]]
*** [[https://github.com/cquery-project/cquery][Low-latency language server supporting multi-million line C++ code-bases]]
*** [[https://jamiecollinson.com/blog/my-emacs-config/#][Emacs Config]]
*** [[https://github.com/andresilva/emacs.d/][My Emacs config]]
*** [[https://emacs.lujianmei.com/][谁说Emacs不好玩？]]
*** [[https://github.com/tsu-nera/dotfiles][My dotfiles history ]]




